{"version":3,"sources":["../lib/conversation.ts"],"names":[],"mappings":"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","file":"conversation.js","sourcesContent":["import { AxiosResponse } from 'axios';\nimport Client from './client'\nimport { Leaves, Paginated, StringifiedTimestamp } from './common/common.types';\nimport { ContactType, ConversationObject, ConversationObjectWithoutParts } from './conversation/conversation.types';\nimport { MessageObject } from './message/message.types';\n\nexport default class Conversation {\n  private conversationBaseUrl = 'conversations'\n\n  constructor(private readonly client: Client) {\n    this.client = client;\n  }\n  create({data}: CreateConversationRequest) {\n    return this.client.post({url: `/${this.conversationBaseUrl}`, data}) as Promise<AxiosResponse<MessageObject, CreateConversationRequest['data']>>;\n  }\n  find({id, query}: RetrieveConversationRequest) {\n    return this.client.get({url: `/${this.conversationBaseUrl}/${id}`, data: query}) as Promise<AxiosResponse<ConversationObject, void>>;;\n  }\n  update({id, data}: UpdateConversationRequest) {\n    return this.client.put({url: `/${this.conversationBaseUrl}/${id}`, data}) as Promise<AxiosResponse<ConversationObject, UpdateConversationRequest['data']>>;\n  }\n  replyById({id, data}: ReplyByIdConversationRequest) {\n    return this.client.post({url: `/${this.conversationBaseUrl}/${id}/reply`, data}) as Promise<AxiosResponse<ConversationObject, ReplyByIdConversationRequest['data']>>;\n  }\n  replyByLast({data}: ReplyByLastConversationRequest) {\n    return this.client.post({url: `/${this.conversationBaseUrl}/last/reply`, data}) as Promise<AxiosResponse<ConversationObject, ReplyByLastConversationRequest['data']>>;\n  }\n  assign({id, data: requestData, withRunningAssignmentRules = false}: AssignConversationRequest) {\n    const url = `/${this.conversationBaseUrl}/${id}/${withRunningAssignmentRules ? 'run_assignment_rules' : ''}`;\n    const data = withRunningAssignmentRules ? undefined : requestData;\n\n    return this.client.post({url, data}) as Promise<AxiosResponse<ConversationObject, AssignConversationRequest['data']>>;\n  }\n  snooze({id, data}: SnoozeConversationRequest) {\n    return this.client.post({url: `/${this.conversationBaseUrl}/${id}/reply`, data}) as Promise<AxiosResponse<ConversationObject, SnoozeConversationRequest['data']>>;\n  }\n  close({id, data}: CloseConversationRequest) {\n    return this.client.post({url: `/${this.conversationBaseUrl}/${id}/parts`, data}) as Promise<AxiosResponse<ConversationObject, CloseConversationRequest['data']>>\n  }\n  open({id, data}: OpenConversationRequest) {\n    return this.client.post({url: `/${this.conversationBaseUrl}/${id}/parts`, data}) as Promise<AxiosResponse<ConversationObject, OpenConversationRequest['data']>>\n  }\n  attachContact({id, data}: AttachContactToConversationRequest) {\n    return this.client.post({url: `/${this.conversationBaseUrl}/${id}/customers`, data}) as Promise<AxiosResponse<AttachContactToConversationResponse, AttachContactToConversationRequest['data']>>\n  }\n  detachContact({conversationId, contactId, data}: DetachContactFromConversationRequest) {\n    return this.client.delete({url: `/${this.conversationBaseUrl}/${conversationId}/customers/${contactId}`, data}) as Promise<AxiosResponse<ConversationObject, DetachContactFromConversationRequest['data']>>\n  }\n  search({data}: SearchConversationRequest){\n    return this.client.post({url: `/${this.conversationBaseUrl}/search`, data}) as Promise<AxiosResponse<SearchConversationResponse, SearchConversationRequest['data']>>\n  }\n  list({query}: ListConversationRequest) {\n    return this.client.get({url: `/${this.conversationBaseUrl}`, data: query}) as Promise<AxiosResponse<ListConversationResponse, void>>;\n  }\n  redactConversationPart({data}: RedactConversationPartRequest) {\n    return this.client.post({url: `/${this.conversationBaseUrl}/redact`, data}) as Promise<AxiosResponse<Conversation, RedactConversationPartRequest>>;\n  }\n}\n\ninterface CreateConversationRequest {\n  data:\n  {from: {\n    type: 'user' | string,\n    id: string,\n  },\n  body: string\n  }\n}\n//\ninterface RetrieveConversationRequest {\n  id: string,\n  query?:  { display_as?: 'plaintext' | string }\n}\n//\ninterface UpdateConversationRequest {\n  id: string,\n  data?: {\n    read?: boolean,\n    custom_attributes: object\n  }\n}\n//\nexport enum ReplyToConversationMessageType {\n  COMMENT = 'comment',\n  NOTE = 'note'\n}\nexport enum ReplyToConversationUserType {\n  ADMIN = 'admin',\n  USER = 'user'\n}\n\ninterface ReplyToConversationAsUser {\n  message_type: ReplyToConversationMessageType,\n  type: ReplyToConversationUserType,\n  body: string,\n  // refactor to CustomerObject\n  intercom_user_id?: string,\n  user_id?: string,\n  email?: string,\n  attachment_urls?: Array<string>,\n}\n\ninterface ReplyToConversationAsAdmin {\n  message_type: ReplyToConversationMessageType,\n  type: ReplyToConversationUserType,\n  body: string,\n  attachment_urls?: Array<string>,\n}\n\ninterface ReplyByIdConversationRequest {\n  id: string;\n  data?: ReplyToConversationAsUser | ReplyToConversationAsAdmin\n};\n\ninterface ReplyByLastConversationRequest {\n  data?: ReplyToConversationAsUser | ReplyToConversationAsAdmin\n}\n//\nexport enum AssignToConversationMessageType {\n  ASSIGNMENT = 'assignment'\n}\nexport enum AssignToConversationUserType {\n  ADMIN = 'admin',\n  TEAM = 'team'\n}\n\ninterface AssignConversationRequest {\n  id: string,\n  data?: {\n    message_type: AssignToConversationMessageType,\n    type: AssignToConversationUserType,\n    admin_id?: string,\n    assignee_id?: string | 0,\n    body?: string,\n  },\n  withRunningAssignmentRules?: boolean\n}\n//\nexport enum SnoozeConversationMessageType {\n  SNOOZED = 'snoozed'\n}\n\ninterface SnoozeConversationRequest {\n  id: string,\n  data: {\n    message_type: SnoozeConversationMessageType,\n    admin_id: string,\n    snoozed_until: StringifiedTimestamp\n  }\n}\n//\nexport enum CloseConversationMessageType {\n  CLOSED = 'closed'\n}\nexport enum CloseConversationType {\n  ADMIN = 'admin'\n}\n\ninterface CloseConversationRequest {\n  id: string,\n  data: {\n    message_type: CloseConversationMessageType,\n    type: CloseConversationType,\n    admin_id: string,\n    body?: string\n  }\n}\n//\nexport enum OpenConversationMessageType {\n  OPEN = 'open'\n}\n\ninterface OpenConversationRequest {\n  id: string,\n  data: {\n    message_type: OpenConversationMessageType,\n    admin_id: string,\n  }\n}\n//\ninterface CustomerObject {\n  intercom_user_id?: string;\n  user_id?: string;\n  email?: string;\n}\n\ninterface AttachContactToConversationAdminRequest {\n  admin_id: string\n  customer: CustomerObject\n}\n\ninterface AttachContactToConversationContactRequest extends CustomerObject {\n  customer: CustomerObject;\n}\n\ninterface AttachContactToConversationRequest {\n  id: string,\n  data: AttachContactToConversationAdminRequest | AttachContactToConversationContactRequest\n}\n\ninterface AttachContactToConversationResponse {\n  customers: Array<{id: string, type: ContactType}>\n}\n//\ninterface DetachContactFromConversationRequest {\n  conversationId: string,\n  contactId: string,\n  data: {\n    admin_id: string\n  }\n}\n//\nexport enum Operators {\n  AND = \"AND\",\n  OR = \"OR\",\n  EQUALS = \"=\",\n  NOT_EQUALS = \"!=\",\n  IN = \"IN\",\n  NIN = \"NIN\",\n  GREATER_THAN = \">\",\n  LESS_THAN = \"<\",\n  CONTAINS = \"~\",\n  NOT_CONTAINS = \"!~\",\n  STARTS_WITH = \"^\",\n  ENDS_WITH = \"$\",\n}\n\ninterface FlatQuery {\n  field: Leaves<ConversationObject>,\n  operator: Operators,\n  value: string | number;\n}\n\ninterface NestedQueries {\n  operator: Operators,\n  value: Array<FlatQuery | NestedQueries> | string | number,\n}\n\ninterface SearchFilters {\n  query: FlatQuery | NestedQueries\n}\ninterface SearchConversationRequest {\n  data: SearchFilters\n}\n\ninterface SearchConversationResponse extends ConversationObject {\n  total_count: number\n}\n//\nexport enum Order {\n  DESC = 'desc',\n  ASC = 'asc',\n}\n\nexport enum SortBy {\n  CreatedAt = 'created_at',\n  UpdatedAt = 'updated_at',\n  WaitingSince = 'waiting_since'\n}\n\ninterface ListConversationRequest {\n  query: {\n    order: Order,\n    sort: SortBy\n  },\n}\n\ntype ListConversationResponse = Paginated<ConversationObjectWithoutParts>\n//\nexport enum RedactConversationPartType {\n  CONVERSATION_PART = 'conversation_part',\n  SOURCE = 'source'\n}\n\ninterface RedactConversationPartRequest {\n  data: {\n    type: RedactConversationPartType,\n    conversation_id: string,\n    conversation_part_id?: string,\n    source_id?: string,\n  }\n}\n"]}