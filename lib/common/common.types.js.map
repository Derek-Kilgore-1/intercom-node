{"version":3,"sources":["../lib/common/common.types.ts"],"names":[],"mappings":"","file":"common.types.js","sourcesContent":["export type StringifiedTimestamp = string;\nexport type Timestamp = number;\nexport type Seconds = number;\nexport type JavascriptObject = Record<string | number, unknown>;\n\nexport type Paginated<T> = {\n  type: string,\n  pages: {\n    type: string,\n    next: any,\n    page: number,\n    per_page: number,\n    total_pages: number,\n  }\n  total_count: number,\n  conversations: Array<T>\n};\n\ntype Join<K, P> = K extends string | number ?\n    P extends string | number ?\n    `${K}${\"\" extends P ? \"\" : \".\"}${P}`\n    : never : never;\n\ntype Prev = [never, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n    11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...0[]]\n\nexport type Paths<T, D extends number = 10> = [D] extends [never] ? never : T extends object ?\n    { [K in keyof T]-?: K extends string | number ?\n        `${K}` | Join<K, Paths<T[K], Prev[D]>>\n        : never\n    }[keyof T] : \"\"\n\nexport type Leaves<T, D extends number = 10> = [D] extends [never] ? never : T extends object ?\n    { [K in keyof T]-?: Join<K, Leaves<T[K], Prev[D]>> }[keyof T] : \"\";\n"]}