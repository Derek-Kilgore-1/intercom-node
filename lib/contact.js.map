{"version":3,"sources":["../../lib/contact.ts"],"names":[],"mappings":"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","file":"contact.js","sourcesContent":["import { AxiosResponse } from 'axios';\nimport { Client } from '.';\nimport { GenericSearchFilters, Paginated } from './common/common.types';\nimport { ListCompaniesResponse } from './company/company.types';\nimport { ContactObject, Role } from './contact/contact.types';\nimport { SegmentObject } from './segment/segment.types';\nimport { TagObject } from './tag/tag.types';\nimport { SubscriptionObject } from './subscription/subscription.types';\n\nexport default class Contact {\n  private contactBaseUrl = 'contacts';\n\n  constructor(private readonly client: Client) {\n    this.client = client;\n  }\n  createUser({externalId,\n    phone,\n    name,\n    avatar,\n    signedUpAt,\n    lastSeenAt,\n    ownerId,\n    isUnsubscribedFromEmails,\n    customAttributes}: CreateUserData) {\n    const requestData: CreateContactRequest = {\n      role: Role.USER,\n      external_id: externalId,\n      phone,\n      name,\n      avatar,\n      signed_up_at: signedUpAt,\n      last_seen_at: lastSeenAt,\n      owner_id: ownerId,\n      unsubscribed_from_emails: isUnsubscribedFromEmails,\n      custom_attributes: customAttributes,\n    }\n\n    return this.client.post({url: `/${this.contactBaseUrl}`, data: requestData}) as Promise<AxiosResponse<ContactObject, CreateContactRequest>>;\n  }\n  createLead(data?: CreateLeadData) {\n    const requestData: CreateContactRequest = {\n      role: Role.LEAD,\n      phone: data?.phone,\n      name: data?.name,\n      avatar: data?.avatar,\n      signed_up_at: data?.signedUpAt,\n      last_seen_at: data?.lastSeenAt,\n      owner_id: data?.ownerId,\n      unsubscribed_from_emails: data?.isUnsubscribedFromMails,\n      custom_attributes: data?.customAttributes,\n    }\n    return this.client.post({url: `/${this.contactBaseUrl}`, data: requestData}) as Promise<AxiosResponse<ContactObject, CreateContactRequest>>;\n  }\n  find({id}: RetrieveContactData) {\n    return this.client.get({url: `/${this.contactBaseUrl}/${id}`}) as Promise<AxiosResponse<ContactObject, void>>;;\n  }\n  update({id,\n    role,\n    externalId,\n    phone,\n    name,\n    avatar,\n    signedUpAt,\n    lastSeenAt,\n    ownerId,\n    isUnsubscribedFromMails,\n    customAttributes}: UpdateContactData) {\n    const data: UpdateContactRequest = {\n      role,\n      external_id: externalId,\n      phone,\n      name,\n      avatar,\n      signed_up_at: signedUpAt,\n      last_seen_at: lastSeenAt,\n      owner_id: ownerId,\n      unsubscribed_from_emails: isUnsubscribedFromMails,\n      custom_attributes: customAttributes,\n    }\n\n    return this.client.put({url: `/${this.contactBaseUrl}/${id}`, data}) as Promise<AxiosResponse<ContactObject, UpdateContactRequest>>;\n  }\n  mergeLeadInUser({leadId, userId}: MergeLeadInUserContactData) {\n    const data: MergeLeadInUserContactRequest = {\n      from: leadId,\n      into: userId\n    }\n\n    return this.client.post({url: `/${this.contactBaseUrl}/merge`, data}) as Promise<AxiosResponse<ContactObject, MergeLeadInUserContactRequest>>;\n  }\n  search({data}: SearchContactRequest){\n    return this.client.post({url: `/${this.contactBaseUrl}/search`, data}) as Promise<AxiosResponse<SearchContactResponse, SearchContactRequest['data']>>\n  }\n  list() {\n    return this.client.get({url: `/${this.contactBaseUrl}`}) as Promise<AxiosResponse<ListContactsResponse, void>>;\n  }\n  delete({id}: DeleteContactData) {\n    return this.client.delete({url: `/${this.contactBaseUrl}/${id}`}) as Promise<AxiosResponse<DeleteContactResponse, void>>;;\n  }\n  archive({id}: ArchiveContactData) {\n    return this.client.post({url: `/${this.contactBaseUrl}/${id}/archive`}) as Promise<AxiosResponse<ArchiveContactResponse, void>>;;\n  }\n  unarchive({id}: UnarchiveContactData) {\n    return this.client.post({url: `/${this.contactBaseUrl}/${id}/unarchive`}) as Promise<AxiosResponse<UnarchiveContactResponse, void>>;;\n  }\n  listAttachedCompanies({id}: RetrieveContactData) {\n    return this.client.get({url: `/${this.contactBaseUrl}/${id}/companies`}) as Promise<AxiosResponse<ListCompaniesResponse, void>>;;\n  }\n  listAttachedTags({id}: RetrieveContactData) {\n    return this.client.get({url: `/${this.contactBaseUrl}/${id}/tags`}) as Promise<AxiosResponse<ListAttachedTagsResponse, void>>;;\n  }\n  listAttachedSegments({id}: RetrieveContactData) {\n    return this.client.get({url: `/${this.contactBaseUrl}/${id}/segments`}) as Promise<AxiosResponse<ListAttachedSegmentsResponse, void>>;;\n  }\n  listAttachedEmailSubscriptions({id}: RetrieveContactData) {\n    return this.client.get({url: `/${this.contactBaseUrl}/${id}/subscriptions`}) as Promise<AxiosResponse<ListAttachedEmailSubscriptionsResponse, void>>;;\n  }\n}\n\ntype CreateContactRequest = Pick<ContactObject, 'role'> & Partial<Pick<ContactObject,  'external_id' | 'email' | 'phone' | 'name' | 'avatar' | 'signed_up_at' | 'last_seen_at' | 'owner_id' | 'unsubscribed_from_emails' | 'custom_attributes'>>;\n\ninterface CreateUserData {\n  externalId?: CreateContactRequest['external_id'],\n  phone?: CreateContactRequest['phone'],\n  name?: CreateContactRequest['name'],\n  avatar?: CreateContactRequest['avatar'],\n  signedUpAt?: CreateContactRequest['signed_up_at'],\n  lastSeenAt?: CreateContactRequest['last_seen_at'],\n  ownerId?: CreateContactRequest['owner_id'],\n  isUnsubscribedFromEmails?: CreateContactRequest['unsubscribed_from_emails'],\n  customAttributes?: CreateContactRequest['custom_attributes']\n}\n\ninterface CreateLeadData {\n  phone?: CreateContactRequest['phone'],\n  name?: CreateContactRequest['name'],\n  avatar?: CreateContactRequest['avatar'],\n  signedUpAt?: CreateContactRequest['signed_up_at'],\n  lastSeenAt?: CreateContactRequest['last_seen_at'],\n  ownerId?: CreateContactRequest['owner_id'],\n  isUnsubscribedFromMails?: CreateContactRequest['unsubscribed_from_emails'],\n  customAttributes?: CreateContactRequest['custom_attributes']\n}\n//\ninterface RetrieveContactData {\n  id: string,\n}\n//\ntype UpdateContactRequest = Partial<Pick<ContactObject, 'role' | 'external_id' | 'email' | 'phone' | 'name' | 'avatar' | 'signed_up_at' | 'last_seen_at' | 'owner_id' | 'unsubscribed_from_emails' | 'custom_attributes'>>;\n\ntype UpdateContactData = {\n  id: string,\n  role?: UpdateContactRequest['role'],\n  externalId?: UpdateContactRequest['external_id'],\n  phone?: UpdateContactRequest['phone'],\n  name?: UpdateContactRequest['name'],\n  avatar?: UpdateContactRequest['avatar'],\n  signedUpAt?: UpdateContactRequest['signed_up_at'],\n  lastSeenAt?: UpdateContactRequest['last_seen_at'],\n  ownerId?: UpdateContactRequest['owner_id'],\n  isUnsubscribedFromMails?: UpdateContactRequest['unsubscribed_from_emails'],\n  customAttributes?: UpdateContactRequest['custom_attributes']\n}\n//\ninterface DeleteContactData {\n  id: string\n}\n\ninterface DeleteContactResponse {\n  id: string,\n  object: ContactObject,\n  deleted: boolean,\n}\n//\ninterface ArchiveContactData {\n  id: string\n}\n\ninterface ArchiveContactResponse {\n  id: string,\n  object: ContactObject,\n  archived: boolean,\n}\n//\ntype UnarchiveContactData = ArchiveContactData;\n\ntype UnarchiveContactResponse = ArchiveContactResponse;\n//\ninterface MergeLeadInUserContactRequest {\n  from: string,\n  into: string\n}\n\ninterface MergeLeadInUserContactData {\n  leadId: string,\n  userId: string\n}\n//\ninterface SearchContactRequest {\n  data: GenericSearchFilters<ContactObject>;\n}\n\ninterface SearchContactResponse extends ContactObject {\n  total_count: number\n}\n//\ntype ListContactsResponse = Paginated & {contacts: Array<ContactObject>};\n//\ntype ListAttachedTagsResponse = {\n  type: string,\n  tags: Array<TagObject>\n}\n//\ntype ListAttachedSegmentsResponse = {\n  type: string,\n  data: Array<SegmentObject>\n}\n//\ntype ListAttachedEmailSubscriptionsResponse = {\n  type: string,\n  data: Array<SubscriptionObject>\n}\n"]}