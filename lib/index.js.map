{"version":3,"sources":["../../lib/index.ts"],"names":[],"mappings":";;;;AAAA,mCAA6C;AAApC,8HAAA,OAAO,OAAU;AAC1B,+BAAyC;AAAhC,0HAAA,OAAO,OAAQ;AACxB,qCAA+C;AAAtC,gIAAA,OAAO,OAAW;AAC3B,yCAAkD;AAAzC,mIAAA,OAAO,OAAY;AAE5B,+DAA4B;AAE5B;IAAA;IAeA,CAAC;IAdQ,6BAAQ,GAAf,UAAgB,MAAW;QACzB,IAAI,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;QACjC,IAAI,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACnC,IAAI,CAAC,SAAS,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;SAC/C;QACD,IAAI,CAAC,UAAU,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;SAChD;QACD,OAAO,gBAAM;aACV,UAAU,CAAC,QAAQ,EAAE,SAAS,CAAC;aAC/B,MAAM,CAAC,UAAU,CAAC;aAClB,MAAM,CAAC,KAAK,CAAC,CAAC;IACnB,CAAC;IACH,2BAAC;AAAD,CAfA,AAeC,IAAA;AAfY,oDAAoB","file":"index.js","sourcesContent":["export { default as Client } from './client';\nexport { default as User } from './user';\nexport { default as Snippet } from './snippet';\nexport { default as UserData } from './user-data';\n\nimport crypto from 'crypto';\n\nexport class IdentityVerification {\n  static userHash(params: any) {\n    let secretKey = params.secretKey;\n    let identifier = params.identifier;\n    if (!secretKey) {\n      throw new Error('secretKey must be provided');\n    }\n    if (!identifier) {\n      throw new Error('identifier must be provided');\n    }\n    return crypto\n      .createHmac('sha256', secretKey)\n      .update(identifier)\n      .digest('hex');\n  }\n}\n"]}