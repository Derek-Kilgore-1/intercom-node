{"version":3,"sources":["../../test/conversation.ts"],"names":[],"mappings":"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","file":"conversation.js","sourcesContent":["import assert from 'assert';\nimport {Client} from '../lib';\nimport nock from 'nock';\nimport { AssignToConversationMessageType, AssignToConversationUserType, CloseConversationMessageType, CloseConversationType, OpenConversationMessageType, Order, RedactConversationPartType, ReplyToConversationMessageType, ReplyToConversationUserType, SnoozeConversationMessageType, SortBy } from '../lib/conversation';\nimport { Operators } from '../lib/common/common.types';\n\ndescribe('conversations', () => {\n  it('should create a conversation', async () => {\n    const id = '536e564f316c83104c000020'\n\n    const message = {\n      from: {\n        type: 'user',\n        id,\n      },\n      body: 'Hello darkness my old friend',\n    };\n\n    const expectedReply = {\n      \"type\": \"user_message\",\n      \"id\": \"2001\",\n      \"created_at\": 1401917202,\n      \"body\" : \"Hello darkness my old friend\",\n      \"message_type\": \"inapp\",\n      \"conversation_id\": \"36000324324\"\n    }\n\n    nock('https://api.intercom.io').post('/conversations', message).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.conversations.create({userId: id, body: message.body});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should retrieve a conversation as is', async () => {\n    const id = '536e564f316c83104c000020';\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').get(`/conversations/${id}`).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.conversations.find({id});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should retrieve a conversation as plain text', async () => {\n    const id = '536e564f316c83104c000020';\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').get(`/conversations/${id}`).query({display_as: 'plaintext'}).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.conversations.find({id, inPlainText: true});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should update a conversation', async () => {\n    const id = '536e564f316c83104c000020';\n\n    const requestBody = {\n      read: false,\n      custom_attributes: {\n        yey: 'in the bay'\n      }\n    }\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').put(`/conversations/${id}`, requestBody).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.conversations.update({id, markRead: requestBody.read, customAttributes: requestBody.custom_attributes});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should reply as user to a conversation by id', async () => {\n    const id = '536e564f316c83104c000020';\n\n    const userRequestBody = {\n      message_type: ReplyToConversationMessageType.COMMENT,\n      type: ReplyToConversationUserType.USER,\n      body: 'blablbalba',\n      intercom_user_id: id,\n      attachment_urls: ['https://definitely-sfw-site.org/bebra.jpg']\n    }\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').post(`/conversations/${id}/reply`, userRequestBody).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.conversations.replyByIdAsUser({id, body: userRequestBody.body, intercomUserId: userRequestBody.intercom_user_id, attachmentUrls: userRequestBody.attachment_urls});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should reply as admin to a conversation by id', async () => {\n    const id = '536e564f316c83104c000020';\n    const adminId = '536e564f316c83104c000020';\n\n    const adminRequestBody = {\n      admin_id: adminId,\n      message_type: ReplyToConversationMessageType.NOTE,\n      type: ReplyToConversationUserType.ADMIN,\n      body: '<b>blablbalba</b>',\n      attachment_urls: ['https://definitely-sfw-site.org/bebra.jpg']\n    }\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').post(`/conversations/${id}/reply`, adminRequestBody).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.conversations.replyByIdAsAdmin({id, adminId, messageType: adminRequestBody.message_type, body: adminRequestBody.body, attachmentUrls: adminRequestBody.attachment_urls});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should reply as user to last conversation', async () => {\n    const id = '536e564f316c83104c000020';\n\n    const userRequestBody = {\n      message_type: ReplyToConversationMessageType.COMMENT,\n      type: ReplyToConversationUserType.USER,\n      body: 'blablbalba',\n      intercom_user_id: id,\n      attachment_urls: ['https://definitely-sfw-site.org/bebra.jpg']\n    }\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').post(`/conversations/last/reply`, userRequestBody).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.conversations.replyByLastAsUser({body: userRequestBody.body, intercomUserId: userRequestBody.intercom_user_id, attachmentUrls: userRequestBody.attachment_urls});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should reply as admin to last conversation', async () => {\n    const adminId = '536e564f316c83104c000021';\n\n    const adminRequestBody = {\n      admin_id: adminId,\n      message_type: ReplyToConversationMessageType.NOTE,\n      type: ReplyToConversationUserType.ADMIN,\n      body: '<b>blablbalba</b>',\n      attachment_urls: ['https://definitely-sfw-site.org/bebra.jpg']\n    }\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').post(`/conversations/last/reply`, adminRequestBody).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.conversations.replyByLastAsAdmin({adminId, messageType: adminRequestBody.message_type, body: adminRequestBody.body, attachmentUrls: adminRequestBody.attachment_urls});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should assign a conversation as team without assignment_rules', async () => {\n    const id = '536e564f316c83104c000020';\n\n    const userRequestBody = {\n      message_type: AssignToConversationMessageType.ASSIGNMENT,\n      type: AssignToConversationUserType.TEAM,\n      assignee_id: id,\n      admin_id: id,\n      body: '<b>blablbalba</b>',\n    }\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').post(`/conversations/${id}`, userRequestBody).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.conversations.assign({id, type: userRequestBody.type, adminId: userRequestBody.admin_id, assigneeId: userRequestBody.assignee_id, body: userRequestBody.body});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should assign a conversation as team with assignment_rules', async () => {\n    const id = '536e564f316c83104c000020';\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').post(`/conversations/${id}/run_assignment_rules`).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.conversations.assign({id, withRunningAssignmentRules: true});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should snooze a conversation', async () => {\n    const id = '536e564f316c83104c000020';\n\n    const adminRequestBody = {\n      message_type: SnoozeConversationMessageType.SNOOZED,\n      admin_id: id,\n      snoozed_until: \"1501512795\"\n    }\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').post(`/conversations/${id}/reply`, adminRequestBody).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.conversations.snooze({id, adminId: adminRequestBody.admin_id, snoozedUntil: adminRequestBody.snoozed_until});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should close a conversation', async () => {\n    const id = '536e564f316c83104c000020';\n\n    const adminRequestBody = {\n      message_type: CloseConversationMessageType.CLOSE,\n      type: CloseConversationType.ADMIN,\n      admin_id: id,\n      body: \"Closed conversation because of X.\"\n    }\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').post(`/conversations/${id}/parts`, adminRequestBody).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.conversations.close({id, adminId: adminRequestBody.admin_id, body: adminRequestBody.body});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should open a conversation', async () => {\n    const id = '536e564f316c83104c000020';\n\n    const adminRequestBody = {\n      message_type: OpenConversationMessageType.OPEN,\n      admin_id: id,\n    }\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').post(`/conversations/${id}/parts`, adminRequestBody).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.conversations.open({id, adminId: adminRequestBody.admin_id});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should attach a contact to the conversation as admin', async () => {\n    const id = '536e564f316c83104c000020';\n\n    const adminRequestBody = {\n      admin_id: id,\n      customer: {\n        intercom_user_id: id\n      }\n    }\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').post(`/conversations/${id}/customers`, adminRequestBody).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.conversations.attachContactAsAdmin({id, adminId: adminRequestBody.admin_id, customer: {intercomUserId: adminRequestBody.customer.intercom_user_id}});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should attach a contact to the conversation as contact', async () => {\n    const id = '536e564f316c83104c000020';\n\n    const contactRequestBody = {\n      user_id: id,\n      customer: {\n        intercom_user_id: id\n      }\n    }\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').post(`/conversations/${id}/customers`, contactRequestBody).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.conversations.attachContactAsContact({id, userId: contactRequestBody.user_id, customer: {intercomUserId: contactRequestBody.customer.intercom_user_id}});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should detach a contact from the conversation as admin', async () => {\n    const id = '536e564f316c83104c000020';\n    const contactId = '536e564f316c83104c000021'\n    const conversationId = '536e564f316c83104c000022'\n\n    const adminRequestBody = {\n      admin_id: id,\n    }\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').delete(`/conversations/${conversationId}/customers/${contactId}`, adminRequestBody).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.conversations.detachContactAsAdmin({conversationId, contactId, adminId: adminRequestBody.admin_id});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should search for conversations using filters', async () => {\n    const requestBody =\n      {\n        \"query\":  {\n           \"operator\": Operators.AND,\n           \"value\": [\n             {\n               \"operator\": Operators.AND,\n               \"value\": [\n                 {\n                   \"field\": \"updated_at\",\n                   \"operator\": Operators.GREATER_THAN,\n                   \"value\": 1560436650\n                 },\n                 {\n                   \"field\": \"conversation_rating.rating\",\n                   \"operator\": Operators.EQUALS,\n                   \"value\": 1\n                 }\n               ]\n             },\n             {\n               \"operator\": Operators.OR,\n               \"value\": [\n                 {\n                   \"field\": \"updated_at\",\n                   \"operator\": Operators.GREATER_THAN,\n                   \"value\": 1560436650\n                 },\n                 {\n                   \"field\": \"conversation_rating.rating\",\n                   \"operator\": Operators.EQUALS,\n                   \"value\": 2\n                 }\n               ]\n             }\n           ]\n         }\n       }\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').post(`/conversations/search`, requestBody).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.conversations.search({data: requestBody});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should list all conversations', async () => {\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').get(`/conversations?order=desc&sort=updated_at`).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.conversations.list({query: {order: Order.DESC, sort: SortBy.UpdatedAt}});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should redact a conversation part', async () => {\n    const conversation_id = '536e564f316c83104c000020';\n    const conversation_part_id = '536e564f316c83104c000021';\n\n    const requestBody = {\n      type: RedactConversationPartType.CONVERSATION_PART,\n      conversation_id,\n      conversation_part_id,\n    }\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').post('/conversations/redact', requestBody).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.conversations.redactConversationPart({type: requestBody.type, conversationId: requestBody.conversation_id, conversationPartId: requestBody.conversation_part_id});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n});\n"]}