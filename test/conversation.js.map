{"version":3,"sources":["../test/conversation.ts"],"names":[],"mappings":"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","file":"conversation.js","sourcesContent":["import assert from 'assert';\nimport {Client} from '../lib';\nimport nock from 'nock';\n\ndescribe.only('conversations', () => {\n  it('should be listed', async () => {\n    nock('https://api.intercom.io').get('/conversations').query({ foo: 'bar' }).reply(200, {});\n    const client = new Client('foo', 'bar');\n    const response = await client.conversations.list({ foo: 'bar' });\n\n    assert.equal(200, response.status);\n    assert.deepStrictEqual({}, response.data);\n  });\n  it('should find', async () => {\n    nock('https://api.intercom.io').get('/conversations/bar').query({ id: 'bar' }).reply(200, {});\n    const client = new Client('foo', 'bar');\n    const response = await client.conversations.find({ id: 'bar' });\n\n    assert.equal(200, response.status);\n    assert.deepStrictEqual({}, response.data);\n  });\n  it('should reply', async () => {\n    nock('https://api.intercom.io').post('/conversations/bar/reply', { id: 'bar', baz: 'bang' }).reply(200, {});\n    const client = new Client('foo', 'bar');\n    const response = await client.conversations.reply({ id: 'bar', baz: 'bang' });\n\n    assert.equal(200, response.status);\n    assert.deepStrictEqual({}, response.data);\n  });\n  it('should mark as read', async () => {\n    nock('https://api.intercom.io').put('/conversations/bar', { read: true }).reply(200, {});\n    const client = new Client('foo', 'bar');\n    const response = await client.conversations.markAsRead({ id: 'bar' });\n\n    assert.equal(200, response.status);\n    assert.deepStrictEqual({}, response.data);\n  });\n});\n"]}