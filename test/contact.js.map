{"version":3,"sources":["../../test/contact.ts"],"names":[],"mappings":"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","file":"contact.js","sourcesContent":["import assert from 'assert';\nimport {Client} from '../lib';\nimport nock from 'nock';\nimport { Role } from '../lib/contact/contact.types';\nimport { Operators } from '../lib/common/common.types';\n\ndescribe('contacts', () => {\n  it('should create a contact with user role', async () => {\n    const id = '536e564f316c83104c000020'\n\n    const contact = {\n      role: 'user',\n      external_id: id,\n      phone: '+48370044567',\n      name: 'Niko Bellic',\n      avatar: 'https://nico-from-gta-iv.com/lets_go_bowling.jpg',\n      signed_up_at: 1638203719,\n      last_seen_at: 1638203719,\n      owner_id: 1,\n      unsubscribed_from_emails: true,\n    };\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').post('/contacts', contact).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.contacts.createUser({externalId: contact.external_id, phone: contact.phone, name: contact.name, avatar: contact.avatar, signedUpAt: contact.signed_up_at, lastSeenAt: contact.last_seen_at, ownerId: contact.owner_id, isUnsubscribedFromEmails: contact.unsubscribed_from_emails});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should create a contact with lead role', async () => {\n    const contact = {\n      role: 'lead',\n    };\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').post('/contacts', contact).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.contacts.createLead();\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should retrieve a contact by id', async () => {\n    const id = '536e564f316c83104c000020';\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').get(`/contacts/${id}`).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.contacts.find({id});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should update a contact', async () => {\n    const id = '536e564f316c83104c000020';\n\n    const requestBody = {\n      role: Role.USER,\n      name: 'Roman The Bowling Fan',\n      custom_attributes: {\n        callBrother: \"Hey Niko, it's me – Roman. Let's go bowling!\"\n      }\n    }\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').put(`/contacts/${id}`, requestBody).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.contacts.update({id, role: requestBody.role, name: requestBody.name, customAttributes: requestBody.custom_attributes});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should delete a contact by id', async () => {\n    const id = '536e564f316c83104c000020';\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').delete(`/contacts/${id}`).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.contacts.delete({id});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should archive a contact by id', async () => {\n    const id = '536e564f316c83104c000020';\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').post(`/contacts/${id}/archive`).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.contacts.archive({id});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should unarchive a contact by id', async () => {\n    const id = '536e564f316c83104c000020';\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').post(`/contacts/${id}/unarchive`).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.contacts.unarchive({id});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should merge two contacts', async () => {\n    const leadId = '536e564f316c83104c000020';\n    const userId = '536e564f316c83104c000021';\n\n    const requestBody = {\n      from: leadId,\n      into: userId,\n    }\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').post(`/contacts/merge`, requestBody).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.contacts.mergeLeadInUser({leadId, userId});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should search for contacts using filters, sorts ascending by name, paginates 5 pages per page on page 2', async () => {\n    const requestBody =\n      {\n        \"query\":  {\n           \"operator\": Operators.AND,\n           \"value\": [\n             {\n               \"operator\": Operators.AND,\n               \"value\": [\n                 {\n                   \"field\": \"updated_at\",\n                   \"operator\": Operators.GREATER_THAN,\n                   \"value\": 1560436650\n                 },\n                 {\n                   \"field\": \"conversation_rating.rating\",\n                   \"operator\": Operators.EQUALS,\n                   \"value\": 1\n                 }\n               ]\n             },\n             {\n               \"operator\": Operators.OR,\n               \"value\": [\n                 {\n                   \"field\": \"updated_at\",\n                   \"operator\": Operators.GREATER_THAN,\n                   \"value\": 1560436650\n                 },\n                 {\n                   \"field\": \"conversation_rating.rating\",\n                   \"operator\": Operators.EQUALS,\n                   \"value\": 2\n                 }\n               ]\n             }\n           ]\n        },\n        \"pagination\": {\n          \"per_page\": 5,\n          \"starting_after\": \"WzE2MzU4NjA2NDgwMDAsIjYxODJiNjJlNDM4YjdhM2EwMWE4YWYxNSIsMl0=\"\n        },\n        \"sort\": {\n          \"field\": \"name\",\n          \"order\": \"ascending\",\n        }\n       }\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').post(`/contacts/search`, requestBody).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.contacts.search({data: {query: requestBody.query, pagination: requestBody.pagination, sort: {field: 'name', order: \"ascending\" as any}}});\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should list all contacts, with per page = 5 and cursor set to next page', async () => {\n    nock('https://api.intercom.io').get('/contacts?per_page=5&starting_after=WzE2MzU3NzU4NjkwMDAsIjYxODJiNjJhMDMwZTk4OTBkZWU4NGM5YiIsMl0=').reply(200, {});\n    const client = new Client('foo', 'bar');\n    const response = await client.contacts.list({perPage: 5, startingAfter: 'WzE2MzU3NzU4NjkwMDAsIjYxODJiNjJhMDMwZTk4OTBkZWU4NGM5YiIsMl0='});\n\n    assert.deepStrictEqual({}, response);\n  });\n\n  it('should list attached companies of contact by id', async () => {\n    const id = '536e564f316c83104c000020';\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').get(`/contacts/${id}/companies?per_page=5&starting_after=WzE2MzU3NzU4NjkwMDAsIjYxODJiNjJhMDMwZTk4OTBkZWU4NGM5YiIsMl0=`).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.contacts.listAttachedCompanies({id, perPage: 5, startingAfter: 'WzE2MzU3NzU4NjkwMDAsIjYxODJiNjJhMDMwZTk4OTBkZWU4NGM5YiIsMl0='});\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should list attached tags of contact by id', async () => {\n    const id = '536e564f316c83104c000020';\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').get(`/contacts/${id}/tags`).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.contacts.listAttachedTags({id});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should list attached segments of contact by id', async () => {\n    const id = '536e564f316c83104c000020';\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').get(`/contacts/${id}/segments`).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.contacts.listAttachedSegments({id});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n  it('should list attached email subscriptions of contact by id', async () => {\n    const id = '536e564f316c83104c000020';\n\n    const expectedReply = {}\n\n    nock('https://api.intercom.io').get(`/contacts/${id}/subscriptions`).reply(200, expectedReply);\n\n    const client = new Client('foo', 'bar');\n\n    const response = await client.contacts.listAttachedEmailSubscriptions({id});\n\n\n    assert.deepStrictEqual(expectedReply, response);\n  });\n\n});\n"]}